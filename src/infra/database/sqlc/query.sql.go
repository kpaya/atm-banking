// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: query.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO account (
  customer_id, account_number, total_balance, avaliable_balance
) VALUES (
  $1, $2, $3, $4
)
RETURNING id
`

type CreateAccountParams struct {
	CustomerID       uuid.UUID
	AccountNumber    string
	TotalBalance     float64
	AvaliableBalance float64
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createAccount,
		arg.CustomerID,
		arg.AccountNumber,
		arg.TotalBalance,
		arg.AvaliableBalance,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const createAddress = `-- name: CreateAddress :one
INSERT INTO address (
  street, zip_code, city, state, country
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id
`

type CreateAddressParams struct {
	Street  string
	ZipCode string
	City    string
	State   string
	Country string
}

func (q *Queries) CreateAddress(ctx context.Context, arg CreateAddressParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createAddress,
		arg.Street,
		arg.ZipCode,
		arg.City,
		arg.State,
		arg.Country,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const createCard = `-- name: CreateCard :one
INSERT INTO card (
  account_id, number, cvv, expiration_month, expiration_year
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id
`

type CreateCardParams struct {
	AccountID       uuid.UUID
	Number          string
	Cvv             string
	ExpirationMonth int32
	ExpirationYear  int32
}

func (q *Queries) CreateCard(ctx context.Context, arg CreateCardParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createCard,
		arg.AccountID,
		arg.Number,
		arg.Cvv,
		arg.ExpirationMonth,
		arg.ExpirationYear,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const createCustomer = `-- name: CreateCustomer :one
INSERT INTO customer (
  name, email, phone, status, cpf, address_id
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING id
`

type CreateCustomerParams struct {
	Name      string
	Email     string
	Phone     string
	Status    string
	Cpf       string
	AddressID uuid.UUID
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createCustomer,
		arg.Name,
		arg.Email,
		arg.Phone,
		arg.Status,
		arg.Cpf,
		arg.AddressID,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const createTransactions = `-- name: CreateTransactions :one
INSERT INTO transactions (
  account_id, amount, type, status
) VALUES (
  $1, $2, $3, $4
)
RETURNING id
`

type CreateTransactionsParams struct {
	AccountID uuid.UUID
	Amount    float64
	Type      string
	Status    string
}

func (q *Queries) CreateTransactions(ctx context.Context, arg CreateTransactionsParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createTransactions,
		arg.AccountID,
		arg.Amount,
		arg.Type,
		arg.Status,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getAccount = `-- name: GetAccount :one
SELECT id, customer_id, account_number, total_balance, avaliable_balance FROM account
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAccount(ctx context.Context, id uuid.UUID) (Account, error) {
	row := q.db.QueryRow(ctx, getAccount, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.AccountNumber,
		&i.TotalBalance,
		&i.AvaliableBalance,
	)
	return i, err
}

const getAddress = `-- name: GetAddress :one
SELECT id, street, zip_code, city, state, country FROM address WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAddress(ctx context.Context, id uuid.UUID) (Address, error) {
	row := q.db.QueryRow(ctx, getAddress, id)
	var i Address
	err := row.Scan(
		&i.ID,
		&i.Street,
		&i.ZipCode,
		&i.City,
		&i.State,
		&i.Country,
	)
	return i, err
}

const getCard = `-- name: GetCard :one
SELECT id, account_id, number, cvv, expiration_month, expiration_year FROM card
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCard(ctx context.Context, id uuid.UUID) (Card, error) {
	row := q.db.QueryRow(ctx, getCard, id)
	var i Card
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Number,
		&i.Cvv,
		&i.ExpirationMonth,
		&i.ExpirationYear,
	)
	return i, err
}

const getCustomer = `-- name: GetCustomer :one
SELECT id, name, email, phone, status, cpf, address_id FROM customer
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCustomer(ctx context.Context, id uuid.UUID) (Customer, error) {
	row := q.db.QueryRow(ctx, getCustomer, id)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.Status,
		&i.Cpf,
		&i.AddressID,
	)
	return i, err
}

const getTransactions = `-- name: GetTransactions :one
SELECT id, account_id, amount, type, status, created_at FROM transactions
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTransactions(ctx context.Context, id uuid.UUID) (Transaction, error) {
	row := q.db.QueryRow(ctx, getTransactions, id)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Amount,
		&i.Type,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const listAccounts = `-- name: ListAccounts :many
SELECT id, customer_id, account_number, total_balance, avaliable_balance FROM account
`

func (q *Queries) ListAccounts(ctx context.Context) ([]Account, error) {
	rows, err := q.db.Query(ctx, listAccounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.CustomerID,
			&i.AccountNumber,
			&i.TotalBalance,
			&i.AvaliableBalance,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAddresses = `-- name: ListAddresses :many
SELECT id, street, zip_code, city, state, country FROM address
`

func (q *Queries) ListAddresses(ctx context.Context) ([]Address, error) {
	rows, err := q.db.Query(ctx, listAddresses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Address
	for rows.Next() {
		var i Address
		if err := rows.Scan(
			&i.ID,
			&i.Street,
			&i.ZipCode,
			&i.City,
			&i.State,
			&i.Country,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCards = `-- name: ListCards :many
SELECT id, account_id, number, cvv, expiration_month, expiration_year FROM card
`

func (q *Queries) ListCards(ctx context.Context) ([]Card, error) {
	rows, err := q.db.Query(ctx, listCards)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Card
	for rows.Next() {
		var i Card
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Number,
			&i.Cvv,
			&i.ExpirationMonth,
			&i.ExpirationYear,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCustomers = `-- name: ListCustomers :many
SELECT id, name, email, phone, status, cpf, address_id FROM customer
`

func (q *Queries) ListCustomers(ctx context.Context) ([]Customer, error) {
	rows, err := q.db.Query(ctx, listCustomers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Customer
	for rows.Next() {
		var i Customer
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Phone,
			&i.Status,
			&i.Cpf,
			&i.AddressID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTransactionss = `-- name: ListTransactionss :many
SELECT id, account_id, amount, type, status, created_at FROM transactions
`

func (q *Queries) ListTransactionss(ctx context.Context) ([]Transaction, error) {
	rows, err := q.db.Query(ctx, listTransactionss)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Amount,
			&i.Type,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccount = `-- name: UpdateAccount :one
UPDATE account
SET customer_id = $1, account_number = $2, total_balance = $3, avaliable_balance = $4
WHERE id = $5
RETURNING id
`

type UpdateAccountParams struct {
	CustomerID       uuid.UUID
	AccountNumber    string
	TotalBalance     float64
	AvaliableBalance float64
	ID               uuid.UUID
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, updateAccount,
		arg.CustomerID,
		arg.AccountNumber,
		arg.TotalBalance,
		arg.AvaliableBalance,
		arg.ID,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const updateAddress = `-- name: UpdateAddress :one
UPDATE address
SET street = $1, zip_code = $2, city = $3, state = $4, country = $5
WHERE id = $6
RETURNING id
`

type UpdateAddressParams struct {
	Street  string
	ZipCode string
	City    string
	State   string
	Country string
	ID      uuid.UUID
}

func (q *Queries) UpdateAddress(ctx context.Context, arg UpdateAddressParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, updateAddress,
		arg.Street,
		arg.ZipCode,
		arg.City,
		arg.State,
		arg.Country,
		arg.ID,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const updateCard = `-- name: UpdateCard :one
UPDATE card
SET account_id = $1, number = $2, cvv = $3, expiration_month = $4, expiration_year = $5
WHERE id = $6
RETURNING id
`

type UpdateCardParams struct {
	AccountID       uuid.UUID
	Number          string
	Cvv             string
	ExpirationMonth int32
	ExpirationYear  int32
	ID              uuid.UUID
}

func (q *Queries) UpdateCard(ctx context.Context, arg UpdateCardParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, updateCard,
		arg.AccountID,
		arg.Number,
		arg.Cvv,
		arg.ExpirationMonth,
		arg.ExpirationYear,
		arg.ID,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const updateCustomer = `-- name: UpdateCustomer :one
UPDATE customer
SET name = $1, email = $2, phone = $3, status = $4, cpf = $5, address_id = $6
WHERE id = $7
RETURNING id
`

type UpdateCustomerParams struct {
	Name      string
	Email     string
	Phone     string
	Status    string
	Cpf       string
	AddressID uuid.UUID
	ID        uuid.UUID
}

func (q *Queries) UpdateCustomer(ctx context.Context, arg UpdateCustomerParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, updateCustomer,
		arg.Name,
		arg.Email,
		arg.Phone,
		arg.Status,
		arg.Cpf,
		arg.AddressID,
		arg.ID,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const updateTransactions = `-- name: UpdateTransactions :one
UPDATE transactions
SET account_id = $1, amount = $2, type = $3, status = $4
WHERE id = $5
RETURNING id
`

type UpdateTransactionsParams struct {
	AccountID uuid.UUID
	Amount    float64
	Type      string
	Status    string
	ID        uuid.UUID
}

func (q *Queries) UpdateTransactions(ctx context.Context, arg UpdateTransactionsParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, updateTransactions,
		arg.AccountID,
		arg.Amount,
		arg.Type,
		arg.Status,
		arg.ID,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}
